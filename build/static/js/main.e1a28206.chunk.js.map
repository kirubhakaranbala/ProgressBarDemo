{"version":3,"sources":["logo.svg","component/button.js","component/progressbar.js","component/progress.js","App.js","serviceWorker.js","index.js","App.scss"],"names":["module","exports","__webpack_require__","p","Buttons","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","Handelclick","val","valfunc","state","_this2","react_default","a","createElement","Fragment","className","type","onClick","e","butval","Component","ProgressBar","Valupdate","vall","users","assign","bar","value","console","log","setState","alert","buttonRange","btn","target","data","map","item","i","class","data-width","key","limit","data-name","style","width","background","color","wht","butdat","component_button","Selclist","onChange","bind","App","fetchingDatachart","fetch","then","resp","json","sta","bars","progressbar","buttons","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e1a28206.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass Buttons extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n\r\n    Handelclick =(val) =>{\r\nthis.props.valfunc(val);\r\n \r\n    }\r\n    render() { \r\n        return ( < >\r\n            <button className=\"btn-primary\" type=\"button\" onClick={(e)=>{this.Handelclick(this.props.butval)}}>{this.props.butval}</button>\r\n\r\n            </ > );\r\n    }\r\n}\r\n \r\nexport default Buttons;","import React, { Component } from 'react';\r\nimport Buttons from './button';\r\nimport Progress from './progress';\r\nimport {wht} from '../App.scss';\r\n\r\nclass ProgressBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            bar:this.props.bar,\r\n            buttonRange:this.props.btn,\r\n            value:'0'\r\n         }\r\n    }\r\n\r\n    Valupdate =(vall) =>{\r\n        \r\n\r\n        const users = Object.assign([], this.state.bar);\r\n    users[this.state.value] = this.state.bar[this.state.value]+vall;\r\n    console.log(users[this.state.value]);\r\n    if(users[this.state.value] >= 0)\r\n    {\r\n        this.setState( {\r\n          bar:users\r\n           \r\n      });\r\n    }else{\r\n      alert(\"Error\");\r\n    }\r\n    }\r\n\r\n    onChange(e) {\r\n      this.setState({\r\n        value: e.target.value\r\n      })\r\n    }\r\n    render() { \r\n\r\n        var data= this.state.bar.map((item,i) =>{\r\n            return   ( <div class=\"progress\" data-width=\"100%\"  key={i}>\r\n            <div class={item>this.props.limit ? 'red' : 'blue'} data-name=\"HTML\" style={{width:(item/this.props.limit*100)+'%',background:item == 0? 'transparent' :''}}></div>\r\n           \r\n            <div className=\"PVal\" style={{color:item/this.props.limit*100 >48 ?wht : ''}}>{item}%</div>\r\n        </div>);\r\n          });\r\n          \r\n          var butdat= this.props.btn.map((item,i) =>{\r\n            return  (<Buttons butval={item} valfunc={this.Valupdate} key={i}/>);\r\n          });\r\n\r\n          var Selclist= this.state.bar.map((item,i) =>{\r\n            return   ( <option key={i} value={i}>ProgressBar {i+1}</option> );\r\n          });\r\n          \r\n \r\n\r\n        return (\r\n            <>\r\n          <div className=\"panel-hdr\" >\r\n          <h2>Progress Bar Demo </h2>\r\n          </div>\r\n\r\n          <div className=\"ProgressSec\">  \r\n          {data}\r\n          </div>\r\n\r\n          <div className=\"ButtonSec\"> \r\n          <div className=\"Slctgrp\">\r\n          <select value={this.state.value} onChange={this.onChange.bind(this)} className=\"form-control\">\r\n          {Selclist}\r\n          </select>\r\n          </div>\r\n\r\n          <div className=\"Btngrp\">\r\n          {butdat}\r\n          </div>\r\n          \r\n          </div>\r\n </>\r\n          );\r\n    }\r\n}\r\n \r\nexport default ProgressBar;","import React, { Component } from 'react';\r\n class Progress extends Component {\r\n     constructor(props) {\r\n         super(props);\r\n         this.state = { \r\n             bars:this.props.bar\r\n          }\r\n     }\r\n     render() { \r\n         \r\n         return ( \r\n           <div class=\"progress\" data-width=\"90%\"  >\r\n            <div class=\"html\" data-name=\"HTML\" style={{width:this.state.bars}}>{this.state.bars}</div>\r\n        </div>\r\n\r\n          );\r\n     }\r\n }\r\n  \r\n export default Progress;\r\n\r\n\r\n ","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport ProgressBar from './component/progressbar';\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      \n\n     }\n  }\n\n\n  fetchingDatachart=()=>{\n  fetch('http://pb-api.herokuapp.com/bars')\n  .then((resp) => resp.json())\n  .then((data) =>\n  {  this.setState({data});\n  })\n   \n\n}\n  \n \n\ncomponentDidMount() {\n  this.fetchingDatachart();\n}\n \n\n\n \n  render() {  \n    \n    var sta= this.state.data || null;\n    if(sta)\n    {\n      var data= this.state.data.bars.map((item,i) =>{\n        return <ProgressBar key={i} val={item }   btn={sta.buttons[0] }/>;\n      })\n\n      return ( \n    \n        <div className=\"App\">  \n       <section>\n       <ProgressBar bar={sta.bars} btn={sta.buttons} limit={sta.limit}/>         \n       </section>\n        </div> );\n    }else{\n     return(\n      <p>Loading...</p>\n     );\n    }\n   \n  }\n}\n \nexport default App;\n \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wht\":\"#fff\"};"],"sourceRoot":""}